{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bojan\\\\Desktop\\\\git proekti\\\\brainsterprojects_petkovskibojanf2\\\\src\\\\components\\\\FirstPage.js\";\nimport React, { useState, useEffect, Fragment } from \"react\";\nimport Filters from \"./Filters\";\nimport Voved from \"./Voved\";\nimport GameList from \"./GameList\";\n\nconst FirstPage = () => {\n  const [cards, setCards] = useState([]);\n  const [cardsToRender, setCardsToRender] = useState([]);\n  const [filters, setFilters] = useState({\n    category: {\n      Akcija: false,\n      Inovacii: false,\n      Energizer: false,\n      Tim: false,\n      Liderstvo: false\n    },\n    timeFrame: {\n      thirty_sixty_minutes: false,\n      five_thirty_minutes: false,\n      sixty_onehundredtwenty_minutes: false,\n      onehundredtwenty_twohundredfourty_minutes: false\n    },\n    groupSize: {\n      two_ten: false,\n      ten_fourty: false,\n      fourtyplus: false\n    }\n  });\n  const [allFilters, setAllFilters] = useState(true);\n  const [actualFilters, setActualFilters] = useState({\n    category: {\n      Енергични: false,\n      Акција: false,\n      Иновации: false,\n      Лидерство: false,\n      Тим: false\n    },\n    timeFrame: {\n      \"5-30 минути\": false,\n      \"30-60 минути\": false,\n      \"60-120 минути\": false,\n      \"120-240 минути\": false\n    },\n    groupSize: {\n      \"2-10\": false,\n      \"10-40\": false,\n      \"40+\": false\n    }\n  });\n  useEffect(() => {\n    fetch(\"https://brainsterboxapi.herokuapp.com/games\").then(res => res.json()).then(data => {\n      setCards(data);\n      setCardsToRender(data);\n    });\n  }, []);\n  useEffect(() => {\n    let allFiltersThatAreActive = {\n      category: [],\n      timeFrame: [],\n      groupSize: []\n    };\n    const {\n      category,\n      groupSize,\n      timeFrame\n    } = actualFilters;\n\n    for (let i in category) {\n      if (category[i]) {\n        allFiltersThatAreActive.category.push(i);\n      }\n    }\n\n    for (let i in timeFrame) {\n      if (timeFrame[i]) {\n        allFiltersThatAreActive.timeFrame.push(i);\n      }\n    }\n\n    for (let i in groupSize) {\n      if (groupSize[i]) {\n        allFiltersThatAreActive.groupSize.push(i);\n      }\n    }\n\n    const filterKeys = Object.keys(allFiltersThatAreActive);\n    let filteredCards = cards.filter(eachCard => {\n      return filterKeys.every(key => {\n        if (!allFiltersThatAreActive[key].length) {\n          return true;\n        }\n\n        return allFiltersThatAreActive[key].includes(eachCard[key]);\n      });\n    });\n    setCardsToRender(filteredCards);\n  }, [actualFilters, cards]);\n  useEffect(() => {\n    if (cardsToRender.length === cards.length) {\n      setAllFilters(true);\n    }\n  }, [cardsToRender.length, cards]);\n  const [prazno, setPrazno] = useState(true);\n  useEffect(() => {\n    if (cardsToRender.length === 0) {\n      setPrazno(false);\n    } else {\n      setPrazno(true);\n    }\n  }, [cardsToRender.length]);\n\n  const toggleFilters = e => {\n    let dataFilter = e.target.dataset.filter,\n        dataFilterName = e.target.dataset.filterName,\n        dataActualFilterName = e.target.dataset.actualFilterName;\n    setFilters(prevState => ({ ...prevState,\n      [dataFilter]: { ...prevState[dataFilter],\n        [dataFilterName]: !prevState[dataFilter][dataFilterName]\n      }\n    }));\n    setActualFilters(prevState => ({ ...prevState,\n      [dataFilter]: { ...prevState[dataFilter],\n        [dataActualFilterName]: !prevState[dataFilter][dataActualFilterName]\n      }\n    }));\n    setAllFilters(false);\n  };\n\n  const toggleAll = () => {\n    setAllFilters(true);\n    setFilters({\n      category: {\n        Akcija: false,\n        Inovacii: false,\n        Energizer: false,\n        Tim: false,\n        Liderstvo: false\n      },\n      timeFrame: {\n        thirty_sixty_minutes: false,\n        five_thirty_minutes: false,\n        sixty_onehundredtwenty_minutes: false,\n        onehundredtwenty_twohundredfourty_minutes: false\n      },\n      groupSize: {\n        two_ten: false,\n        ten_fourty: false,\n        fourtyplus: false\n      }\n    });\n    setActualFilters({\n      category: {\n        Акција: false,\n        Иновации: false,\n        Лидерство: false,\n        Тим: false,\n        Енергични: false\n      },\n      timeFrame: {\n        \"30-60 минути\": false,\n        \"5-30 минути\": false,\n        \"60-120 минути\": false,\n        \"120-240 минути\": false\n      },\n      groupSize: {\n        \"2-10\": false,\n        \"10-40\": false,\n        \"40+\": false\n      }\n    });\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(Voved, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }), React.createElement(Filters, {\n    toggleFilters: toggleFilters,\n    filters: filters,\n    actualFilters: actualFilters,\n    allFilters: allFilters,\n    toggleAll: toggleAll,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }), React.createElement(GameList, {\n    prikaziDiv: prazno,\n    cards: cardsToRender,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }), React.createElement(Voved, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }));\n};\n\nexport default FirstPage;","map":{"version":3,"sources":["C:/Users/Bojan/Desktop/git proekti/brainsterprojects_petkovskibojanf2/src/components/FirstPage.js"],"names":["React","useState","useEffect","Fragment","Filters","Voved","GameList","FirstPage","cards","setCards","cardsToRender","setCardsToRender","filters","setFilters","category","Akcija","Inovacii","Energizer","Tim","Liderstvo","timeFrame","thirty_sixty_minutes","five_thirty_minutes","sixty_onehundredtwenty_minutes","onehundredtwenty_twohundredfourty_minutes","groupSize","two_ten","ten_fourty","fourtyplus","allFilters","setAllFilters","actualFilters","setActualFilters","Енергични","Акција","Иновации","Лидерство","Тим","fetch","then","res","json","data","allFiltersThatAreActive","i","push","filterKeys","Object","keys","filteredCards","filter","eachCard","every","key","length","includes","prazno","setPrazno","toggleFilters","e","dataFilter","target","dataset","dataFilterName","filterName","dataActualFilterName","actualFilterName","prevState","toggleAll"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, Fragment } from \"react\";\r\nimport Filters from \"./Filters\";\r\nimport Voved from \"./Voved\";\r\nimport GameList from \"./GameList\";\r\n\r\nconst FirstPage = () => {\r\n  const [cards, setCards] = useState([]);\r\n  const [cardsToRender, setCardsToRender] = useState([]);\r\n  const [filters, setFilters] = useState({\r\n    category: {\r\n      Akcija: false,\r\n      Inovacii: false,\r\n      Energizer: false,\r\n      Tim: false,\r\n      Liderstvo: false\r\n    },\r\n    timeFrame: {\r\n      thirty_sixty_minutes: false,\r\n      five_thirty_minutes: false,\r\n      sixty_onehundredtwenty_minutes: false,\r\n      onehundredtwenty_twohundredfourty_minutes: false\r\n    },\r\n    groupSize: {\r\n      two_ten: false,\r\n      ten_fourty: false,\r\n      fourtyplus: false\r\n    }\r\n  });\r\n  const [allFilters, setAllFilters] = useState(true);\r\n  const [actualFilters, setActualFilters] = useState({\r\n    category: {\r\n      Енергични: false,\r\n      Акција: false,\r\n      Иновации: false,\r\n      Лидерство: false,\r\n      Тим: false\r\n    },\r\n    timeFrame: {\r\n      \"5-30 минути\": false,\r\n      \"30-60 минути\": false,\r\n      \"60-120 минути\": false,\r\n      \"120-240 минути\": false\r\n    },\r\n    groupSize: {\r\n      \"2-10\": false,\r\n      \"10-40\": false,\r\n      \"40+\": false\r\n    }\r\n  });\r\n  useEffect(() => {\r\n    fetch(\"https://brainsterboxapi.herokuapp.com/games\")\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        setCards(data);\r\n        setCardsToRender(data);\r\n      });\r\n  }, []);\r\n  useEffect(() => {\r\n    let allFiltersThatAreActive = {\r\n      category: [],\r\n      timeFrame: [],\r\n      groupSize: []\r\n    };\r\n\r\n    const { category, groupSize, timeFrame } = actualFilters;\r\n    for (let i in category) {\r\n      if (category[i]) {\r\n        allFiltersThatAreActive.category.push(i);\r\n      }\r\n    }\r\n    for (let i in timeFrame) {\r\n      if (timeFrame[i]) {\r\n        allFiltersThatAreActive.timeFrame.push(i);\r\n      }\r\n    }\r\n\r\n    for (let i in groupSize) {\r\n      if (groupSize[i]) {\r\n        allFiltersThatAreActive.groupSize.push(i);\r\n      }\r\n    }\r\n    const filterKeys = Object.keys(allFiltersThatAreActive);\r\n    let filteredCards = cards.filter(eachCard => {\r\n      return filterKeys.every(key => {\r\n        if (!allFiltersThatAreActive[key].length) {\r\n          return true;\r\n        }\r\n\r\n        return allFiltersThatAreActive[key].includes(eachCard[key]);\r\n      });\r\n    });\r\n    setCardsToRender(filteredCards);\r\n  }, [actualFilters, cards]);\r\n  useEffect(() => {\r\n    if (cardsToRender.length === cards.length) {\r\n      setAllFilters(true);\r\n    }\r\n  }, [cardsToRender.length, cards]);\r\n  const [prazno, setPrazno] = useState(true);\r\n  useEffect(() => {\r\n    if (cardsToRender.length === 0) {\r\n      setPrazno(false);\r\n    } else {\r\n      setPrazno(true);\r\n    }\r\n  }, [cardsToRender.length]);\r\n  const toggleFilters = e => {\r\n    let dataFilter = e.target.dataset.filter,\r\n      dataFilterName = e.target.dataset.filterName,\r\n      dataActualFilterName = e.target.dataset.actualFilterName;\r\n    setFilters(prevState => ({\r\n      ...prevState,\r\n      [dataFilter]: {\r\n        ...prevState[dataFilter],\r\n        [dataFilterName]: !prevState[dataFilter][dataFilterName]\r\n      }\r\n    }));\r\n    setActualFilters(prevState => ({\r\n      ...prevState,\r\n      [dataFilter]: {\r\n        ...prevState[dataFilter],\r\n        [dataActualFilterName]: !prevState[dataFilter][dataActualFilterName]\r\n      }\r\n    }));\r\n\r\n    setAllFilters(false);\r\n  };\r\n\r\n  const toggleAll = () => {\r\n    setAllFilters(true);\r\n    setFilters({\r\n      category: {\r\n        Akcija: false,\r\n        Inovacii: false,\r\n        Energizer: false,\r\n        Tim: false,\r\n        Liderstvo: false\r\n      },\r\n      timeFrame: {\r\n        thirty_sixty_minutes: false,\r\n        five_thirty_minutes: false,\r\n        sixty_onehundredtwenty_minutes: false,\r\n        onehundredtwenty_twohundredfourty_minutes: false\r\n      },\r\n      groupSize: {\r\n        two_ten: false,\r\n        ten_fourty: false,\r\n        fourtyplus: false\r\n      }\r\n    });\r\n    setActualFilters({\r\n      category: {\r\n        Акција: false,\r\n        Иновации: false,\r\n        Лидерство: false,\r\n        Тим: false,\r\n        Енергични: false\r\n      },\r\n      timeFrame: {\r\n        \"30-60 минути\": false,\r\n        \"5-30 минути\": false,\r\n        \"60-120 минути\": false,\r\n        \"120-240 минути\": false\r\n      },\r\n      groupSize: {\r\n        \"2-10\": false,\r\n        \"10-40\": false,\r\n        \"40+\": false\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Voved />\r\n      <Filters\r\n        toggleFilters={toggleFilters}\r\n        filters={filters}\r\n        actualFilters={actualFilters}\r\n        allFilters={allFilters}\r\n        toggleAll={toggleAll}\r\n      />\r\n      <GameList prikaziDiv={prazno} cards={cardsToRender} />\r\n      <Voved />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default FirstPage;\r\n"]},"metadata":{},"sourceType":"module"}